-- 1. Create a bucket for audio files
-- Go to Storage -> Buckets -> Create Bucket
-- Name: audio
-- Make it a public bucket for now.

-- 2. Create tables for tracks and playlists
-- Go to SQL Editor -> New Query and paste the content below.

-- TRACKS TABLE
CREATE TABLE tracks (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  title TEXT NOT NULL,
  artist TEXT NOT NULL,
  album TEXT,
  cover_url TEXT,
  audio_url TEXT NOT NULL,
  duration INT NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- PLAYLISTS TABLE
CREATE TABLE playlists (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  name TEXT NOT NULL,
  description TEXT,
  cover_url TEXT,
  is_auto BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- PLAYLIST_TRACKS (Junction Table)
CREATE TABLE playlist_tracks (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  playlist_id UUID REFERENCES playlists(id) ON DELETE CASCADE NOT NULL,
  track_id UUID REFERENCES tracks(id) ON DELETE CASCADE NOT NULL,
  added_at TIMESTAMPTZ DEFAULT NOW(),
  UNIQUE(playlist_id, track_id)
);

-- 3. Enable Row Level Security (RLS)
ALTER TABLE tracks ENABLE ROW LEVEL SECURITY;
ALTER TABLE playlists ENABLE ROW LEVEL SECURITY;
ALTER TABLE playlist_tracks ENABLE ROW LEVEL SECURITY;

-- 4. Create RLS Policies
-- Allow users to view their own data
CREATE POLICY "Allow individual read access" ON tracks FOR SELECT USING (auth.uid() = user_id);
CREATE POLICY "Allow individual read access" ON playlists FOR SELECT USING (auth.uid() = user_id);
CREATE POLICY "Allow individual read access" ON playlist_tracks FOR SELECT USING (
  EXISTS (
    SELECT 1 FROM playlists WHERE playlists.id = playlist_tracks.playlist_id AND playlists.user_id = auth.uid()
  )
);

-- Allow users to insert their own data
CREATE POLICY "Allow individual insert access" ON tracks FOR INSERT WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Allow individual insert access" ON playlists FOR INSERT WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Allow individual insert access" ON playlist_tracks FOR INSERT WITH CHECK (
  EXISTS (
    SELECT 1 FROM playlists WHERE playlists.id = playlist_tracks.playlist_id AND playlists.user_id = auth.uid()
  )
);

-- Allow users to update their own data
CREATE POLICY "Allow individual update access" ON tracks FOR UPDATE USING (auth.uid() = user_id);
CREATE POLICY "Allow individual update access" ON playlists FOR UPDATE USING (auth.uid() = user_id);
CREATE POLICY "Allow individual update access" ON playlist_tracks FOR UPDATE USING (
  EXISTS (
    SELECT 1 FROM playlists WHERE playlists.id = playlist_tracks.playlist_id AND playlists.user_id = auth.uid()
  )
);

-- Allow users to delete their own data
CREATE POLICY "Allow individual delete access" ON tracks FOR DELETE USING (auth.uid() = user_id);
CREATE POLICY "Allow individual delete access" ON playlists FOR DELETE USING (auth.uid() = user_id);
CREATE POLICY "Allow individual delete access" ON playlist_tracks FOR DELETE USING (
  EXISTS (
    SELECT 1 FROM playlists WHERE playlists.id = playlist_tracks.playlist_id AND playlists.user_id = auth.uid()
  )
);

-- Allow users to access their own audio files in storage
CREATE POLICY "Allow individual access to audio" ON storage.objects FOR SELECT USING ( bucket_id = 'audio' AND owner = auth.uid() );
CREATE POLICY "Allow individual insert to audio" ON storage.objects FOR INSERT WITH CHECK ( bucket_id = 'audio' AND owner = auth.uid() );
CREATE POLICY "Allow individual update to audio" ON storage.objects FOR UPDATE WITH CHECK ( bucket_id = 'audio' AND owner = auth.uid() );
CREATE POLICY "Allow individual delete to audio" ON storage.objects FOR DELETE USING ( bucket_id = 'audio' AND owner = auth.uid() );
